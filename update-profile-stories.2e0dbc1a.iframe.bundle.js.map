{"version":3,"file":"update-profile-stories.2e0dbc1a.iframe.bundle.js","mappings":";;AAuFA;AACA;AACA;AACA;;;AAIA;;;;AAOA;;;;;;AAMA;;AAGA;AACA;AACA;;;;AAKA;;AAEA;AACA;AACA;;;;;AAOA;;;AAKA;;;AAIA;;AAEA;;AAEA;;;AAIA;;;;AAKA;;;;;AC5FA;AAEA;;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAGA;;;;AAWA;ACrEA;;;AAOA","sources":["webpack://@holochain-open-dev/profiles-dev/../../src/elements/edit-profile.ts","webpack://@holochain-open-dev/profiles-dev/../../src/elements/update-profile.ts","webpack://@holochain-open-dev/profiles-dev/./stories/update-profile.stories.js"],"sourcesContent":["import { html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators.js\";\nimport { localized, msg, str } from \"@lit/localize\";\nimport { consume } from \"@lit-labs/context\";\nimport { onSubmit, sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport \"@shoelace-style/shoelace/dist/components/avatar/avatar.js\";\nimport \"@shoelace-style/shoelace/dist/components/button/button.js\";\nimport \"@shoelace-style/shoelace/dist/components/input/input.js\";\nimport \"@shoelace-style/shoelace/dist/components/icon/icon.js\";\nimport \"@holochain-open-dev/elements/elements/select-avatar.js\";\n\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { profilesStoreContext } from \"../context.js\";\nimport { Profile } from \"../types.js\";\nimport { FieldConfig } from \"../config.js\";\n\n/**\n * @element edit-profile\n * @fires save-profile - Fired when the save profile button is clicked\n */\n@localized()\n@customElement(\"edit-profile\")\nexport class EditProfile extends LitElement {\n  /**\n   * The profile to be edited.\n   */\n  @property({ type: Object })\n  profile: Profile | undefined;\n\n  /**\n   * Label for the save profile button.\n   */\n  @property({ type: String, attribute: \"save-profile-label\" })\n  saveProfileLabel: string | undefined;\n\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  @property({ type: Boolean, attribute: \"allow-cancel\" })\n  allowCancel = false;\n\n  /** Private properties */\n\n  avatarMode() {\n    return (\n      this.store.config.avatarMode === \"avatar-required\" ||\n      this.store.config.avatarMode === \"avatar-optional\"\n    );\n  }\n\n  fireSaveProfile(fields: Record<string, string>) {\n    const nickname = fields[\"nickname\"];\n    delete fields[\"nickname\"];\n\n    const profile: Profile = {\n      fields,\n      nickname,\n    };\n\n    this.dispatchEvent(\n      new CustomEvent(\"save-profile\", {\n        detail: {\n          profile,\n        },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  fireCancel() {\n    this.dispatchEvent(\n      new CustomEvent(\"cancel-edit-profile\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  renderField(fieldConfig: FieldConfig) {\n    return html`\n      <sl-input\n        name=\"${fieldConfig.name}\"\n        .required=${fieldConfig.required}\n        .label=${fieldConfig.label}\n        .value=${this.profile?.fields[fieldConfig.name] || \"\"}\n        style=\"margin-bottom: 16px;\"\n      ></sl-input>\n    `;\n  }\n\n  render() {\n    return html`\n      <form\n        id=\"profile-form\"\n        class=\"column\"\n        ${onSubmit((fields) => this.fireSaveProfile(fields))}\n      >\n        <div\n          class=\"row\"\n          style=\"justify-content: center; align-self: start; margin-bottom: 16px\"\n        >\n          ${this.avatarMode()\n            ? html` <select-avatar\n                name=\"avatar\"\n                .value=${this.profile?.fields[\"avatar\"] || undefined}\n                .required=${this.store.config.avatarMode === \"avatar-required\"}\n              ></select-avatar>`\n            : html``}\n\n          <sl-input\n            name=\"nickname\"\n            .label=${msg(\"Nickname\")}\n            required\n            minLength=\"${this.store.config.minNicknameLength}\"\n            .value=${this.profile?.nickname || \"\"}\n            .helpText=${msg(\n              str`Min. ${this.store.config.minNicknameLength} characters`\n            )}\n            style=\"margin-left: 16px;\"\n          ></sl-input>\n        </div>\n\n        ${this.store.config.additionalFields.map((field) =>\n          this.renderField(field)\n        )}\n\n        <div class=\"row\" style=\"margin-top: 8px;\">\n          ${this.allowCancel\n            ? html`\n                <sl-button\n                  style=\"flex: 1; margin-right: 6px;\"\n                  @click=${() => this.fireCancel()}\n                >\n                  ${msg(\"Cancel\")}\n                </sl-button>\n              `\n            : html``}\n\n          <sl-button style=\"flex: 1;\" variant=\"primary\" type=\"submit\"\n            >${this.saveProfileLabel ?? msg(\"Save Profile\")}\n          </sl-button>\n        </div>\n      </form>\n    `;\n  }\n\n  static styles = [sharedStyles];\n}\n","import { html, css, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { consume } from \"@lit-labs/context\";\nimport { localized, msg } from \"@lit/localize\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport \"@holochain-open-dev/elements/elements/display-error.js\";\nimport \"@shoelace-style/shoelace/dist/components/spinner/spinner.js\";\n\nimport \"./edit-profile.js\";\n\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { profilesStoreContext } from \"../context.js\";\nimport { Profile } from \"../types.js\";\n\n/**\n * @element update-profile\n * @fires profile-updated - Fired after the profile has been created. Detail will have this shape: { profile: { nickname, fields } }\n */\n@localized()\n@customElement(\"update-profile\")\nexport class UpdateProfile extends LitElement {\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /**\n   * @internal\n   */\n  private _myProfile = new StoreSubscriber(this, () => this.store.myProfile);\n\n  async updateProfile(profile: Profile) {\n    await this.store.client.updateProfile(profile);\n\n    this.dispatchEvent(\n      new CustomEvent(\"profile-updated\", {\n        detail: {\n          profile,\n        },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  render() {\n    switch (this._myProfile.value.status) {\n      case \"pending\":\n        return html`<div\n          class=\"column\"\n          style=\"align-items: center; justify-content: center; flex: 1;\"\n        >\n          <sl-spinner></sl-spinner>\n        </div>`;\n      case \"complete\":\n        return html` <edit-profile\n          .allowCancel=${true}\n          style=\"margin-top: 16px; flex: 1\"\n          .profile=${this._myProfile.value.value}\n          .saveProfileLabel=${msg(\"Update Profile\")}\n          @save-profile=${(e: CustomEvent) =>\n            this.updateProfile(e.detail.profile)}\n        ></edit-profile>`;\n      case \"error\":\n        return html`<display-error\n          .headline=${msg(\"Error fetching your profile\")}\n          .error=${this._myProfile.value.error.data.data}\n        ></display-error>`;\n    }\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: flex;\n        }\n      `,\n    ];\n  }\n}\n","import { html } from \"lit-html\";\nimport \"@holochain-open-dev/profiles/elements/update-profile.js\";\nimport \"@holochain-open-dev/profiles/elements/profiles-context.js\";\nimport { ProfilesZomeMock } from \"@holochain-open-dev/profiles/mocks\";\nimport { ProfilesStore, ProfilesClient } from \"@holochain-open-dev/profiles\";\n\nconst mock = new ProfilesZomeMock();\n\n// More on how to set up stories at: https://storybook.js.org/docs/7.0/web-components/writing-stories/introduction\nexport default {\n  title: \"Frontend/Elements/update-profile\",\n  tags: [\"autodocs\"],\n  component: \"update-profile\",\n  render: (args) =>\n    html` <profiles-context\n      .store=${new ProfilesStore(new ProfilesClient(mock))}\n    >\n      <update-profile />\n    </profiles-context>`,\n};\n\n// More on writing stories with args: https://storybook.js.org/docs/7.0/web-components/writing-stories/args\nexport const Demo = {};\n"],"names":[],"sourceRoot":""}