{"version":3,"file":"create-profile-stories.0b66ba9f.iframe.bundle.js","mappings":";AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACqBA;;;;;;;AAaA;;;;;;ACSA;;;AAGA;AACA;AACA;;;AAKA;;ACyBA;AACA;AACA;AACA;;;AAIA;;;;AAOA;;;;;;AAMA;;AAGA;AACA;AACA;;;;AAKA;;AAEA;AACA;AACA;;;;;AAOA;;;AAKA;;;AAIA;;AAEA;;AAEA;;;AAIA;;;;AAKA;ACzIA;;;AAOA","sources":["webpack://@holochain-open-dev/profiles-dev/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.BZVXMWBD.js","webpack://@holochain-open-dev/profiles-dev/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.OGSWONUA.js","webpack://@holochain-open-dev/profiles-dev/../../src/elements/create-profile.ts","webpack://@holochain-open-dev/profiles-dev/../../src/elements/edit-profile.ts","webpack://@holochain-open-dev/profiles-dev/./stories/create-profile.stories.js"],"sourcesContent":["import {\n  component_styles_default\n} from \"./chunk.BCEYT3RT.js\";\nimport {\n  i\n} from \"./chunk.DUT32TWM.js\";\n\n// src/components/card/card.styles.ts\nvar card_styles_default = i`\n  ${component_styles_default}\n\n  :host {\n    --border-color: var(--sl-color-neutral-200);\n    --border-radius: var(--sl-border-radius-medium);\n    --border-width: 1px;\n    --padding: var(--sl-spacing-large);\n\n    display: inline-block;\n  }\n\n  .card {\n    display: flex;\n    flex-direction: column;\n    background-color: var(--sl-panel-background-color);\n    box-shadow: var(--sl-shadow-x-small);\n    border: solid var(--border-width) var(--border-color);\n    border-radius: var(--border-radius);\n  }\n\n  .card__image {\n    display: flex;\n    border-top-left-radius: var(--border-radius);\n    border-top-right-radius: var(--border-radius);\n    margin: calc(-1 * var(--border-width));\n    overflow: hidden;\n  }\n\n  .card__image::slotted(img) {\n    display: block;\n    width: 100%;\n  }\n\n  .card:not(.card--has-image) .card__image {\n    display: none;\n  }\n\n  .card__header {\n    display: block;\n    border-bottom: solid var(--border-width) var(--border-color);\n    padding: calc(var(--padding) / 2) var(--padding);\n  }\n\n  .card:not(.card--has-header) .card__header {\n    display: none;\n  }\n\n  .card:not(.card--has-image) .card__header {\n    border-top-left-radius: var(--border-radius);\n    border-top-right-radius: var(--border-radius);\n  }\n\n  .card__body {\n    display: block;\n    padding: var(--padding);\n  }\n\n  .card--has-footer .card__footer {\n    display: block;\n    border-top: solid var(--border-width) var(--border-color);\n    padding: var(--padding);\n  }\n\n  .card:not(.card--has-footer) .card__footer {\n    display: none;\n  }\n`;\n\nexport {\n  card_styles_default\n};\n","import {\n  card_styles_default\n} from \"./chunk.BZVXMWBD.js\";\nimport {\n  HasSlotController\n} from \"./chunk.3IYPB6RR.js\";\nimport {\n  o\n} from \"./chunk.ORW72H2K.js\";\nimport {\n  ShoelaceElement,\n  e\n} from \"./chunk.ROLL4627.js\";\nimport {\n  y\n} from \"./chunk.DUT32TWM.js\";\nimport {\n  __decorateClass\n} from \"./chunk.LKA3TPUC.js\";\n\n// src/components/card/card.ts\nvar SlCard = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.hasSlotController = new HasSlotController(this, \"footer\", \"header\", \"image\");\n  }\n  render() {\n    return y`\n      <div\n        part=\"base\"\n        class=${o({\n      card: true,\n      \"card--has-footer\": this.hasSlotController.test(\"footer\"),\n      \"card--has-image\": this.hasSlotController.test(\"image\"),\n      \"card--has-header\": this.hasSlotController.test(\"header\")\n    })}\n      >\n        <slot name=\"image\" part=\"image\" class=\"card__image\"></slot>\n        <slot name=\"header\" part=\"header\" class=\"card__header\"></slot>\n        <slot part=\"body\" class=\"card__body\"></slot>\n        <slot name=\"footer\" part=\"footer\" class=\"card__footer\"></slot>\n      </div>\n    `;\n  }\n};\nSlCard.styles = card_styles_default;\nSlCard = __decorateClass([\n  e(\"sl-card\")\n], SlCard);\n\nexport {\n  SlCard\n};\n","import { html, LitElement } from \"lit\";\nimport { property, customElement } from \"lit/decorators.js\";\nimport { consume } from \"@lit-labs/context\";\nimport { localized, msg } from \"@lit/localize\";\nimport { sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport \"@shoelace-style/shoelace/dist/components/card/card.js\";\nimport \"./edit-profile.js\";\n\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { profilesStoreContext } from \"../context.js\";\nimport { Profile } from \"../types.js\";\n\n/**\n * A custom element that fires event on value change.\n *\n * @element create-profile\n * @fires profile-created - Fired after the profile has been created. Detail will have this shape: { profile: { nickname, fields } }\n */\n@localized()\n@customElement(\"create-profile\")\nexport class CreateProfile extends LitElement {\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /** Private properties */\n\n  async createProfile(profile: Profile) {\n    await this.store.client.createProfile(profile);\n\n    this.dispatchEvent(\n      new CustomEvent(\"profile-created\", {\n        detail: {\n          profile,\n        },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  render() {\n    return html`\n      <sl-card>\n        <div class=\"column\">\n          <span\n            class=\"title\"\n            style=\"margin-bottom: 16px; align-self: flex-start\"\n            >${msg(\"Create Profile\")}</span\n          >\n          <edit-profile\n            .saveProfileLabel=${msg(\"Create Profile\")}\n            .store=${this.store}\n            @save-profile=${(e: CustomEvent) =>\n              this.createProfile(e.detail.profile)}\n          ></edit-profile></div\n      ></sl-card>\n    `;\n  }\n\n  static styles = [sharedStyles];\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators.js\";\nimport { localized, msg, str } from \"@lit/localize\";\nimport { consume } from \"@lit-labs/context\";\nimport { onSubmit, sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport \"@shoelace-style/shoelace/dist/components/avatar/avatar.js\";\nimport \"@shoelace-style/shoelace/dist/components/button/button.js\";\nimport \"@shoelace-style/shoelace/dist/components/input/input.js\";\nimport \"@shoelace-style/shoelace/dist/components/icon/icon.js\";\nimport \"@holochain-open-dev/elements/elements/select-avatar.js\";\n\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { profilesStoreContext } from \"../context.js\";\nimport { Profile } from \"../types.js\";\nimport { FieldConfig } from \"../config.js\";\n\n/**\n * @element edit-profile\n * @fires save-profile - Fired when the save profile button is clicked\n */\n@localized()\n@customElement(\"edit-profile\")\nexport class EditProfile extends LitElement {\n  /**\n   * The profile to be edited.\n   */\n  @property({ type: Object })\n  profile: Profile | undefined;\n\n  /**\n   * Label for the save profile button.\n   */\n  @property({ type: String, attribute: \"save-profile-label\" })\n  saveProfileLabel: string | undefined;\n\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  @property({ type: Boolean, attribute: \"allow-cancel\" })\n  allowCancel = false;\n\n  /** Private properties */\n\n  avatarMode() {\n    return (\n      this.store.config.avatarMode === \"avatar-required\" ||\n      this.store.config.avatarMode === \"avatar-optional\"\n    );\n  }\n\n  fireSaveProfile(fields: Record<string, string>) {\n    const nickname = fields[\"nickname\"];\n    delete fields[\"nickname\"];\n\n    const profile: Profile = {\n      fields,\n      nickname,\n    };\n\n    this.dispatchEvent(\n      new CustomEvent(\"save-profile\", {\n        detail: {\n          profile,\n        },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  fireCancel() {\n    this.dispatchEvent(\n      new CustomEvent(\"cancel-edit-profile\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  renderField(fieldConfig: FieldConfig) {\n    return html`\n      <sl-input\n        name=\"${fieldConfig.name}\"\n        .required=${fieldConfig.required}\n        .label=${fieldConfig.label}\n        .value=${this.profile?.fields[fieldConfig.name] || \"\"}\n        style=\"margin-bottom: 16px;\"\n      ></sl-input>\n    `;\n  }\n\n  render() {\n    return html`\n      <form\n        id=\"profile-form\"\n        class=\"column\"\n        ${onSubmit((fields) => this.fireSaveProfile(fields))}\n      >\n        <div\n          class=\"row\"\n          style=\"justify-content: center; align-self: start; margin-bottom: 16px\"\n        >\n          ${this.avatarMode()\n            ? html` <select-avatar\n                name=\"avatar\"\n                .value=${this.profile?.fields[\"avatar\"] || undefined}\n                .required=${this.store.config.avatarMode === \"avatar-required\"}\n              ></select-avatar>`\n            : html``}\n\n          <sl-input\n            name=\"nickname\"\n            .label=${msg(\"Nickname\")}\n            required\n            minLength=\"${this.store.config.minNicknameLength}\"\n            .value=${this.profile?.nickname || \"\"}\n            .helpText=${msg(\n              str`Min. ${this.store.config.minNicknameLength} characters`\n            )}\n            style=\"margin-left: 16px;\"\n          ></sl-input>\n        </div>\n\n        ${this.store.config.additionalFields.map((field) =>\n          this.renderField(field)\n        )}\n\n        <div class=\"row\" style=\"margin-top: 8px;\">\n          ${this.allowCancel\n            ? html`\n                <sl-button\n                  style=\"flex: 1; margin-right: 6px;\"\n                  @click=${() => this.fireCancel()}\n                >\n                  ${msg(\"Cancel\")}\n                </sl-button>\n              `\n            : html``}\n\n          <sl-button style=\"flex: 1;\" variant=\"primary\" type=\"submit\"\n            >${this.saveProfileLabel ?? msg(\"Save Profile\")}\n          </sl-button>\n        </div>\n      </form>\n    `;\n  }\n\n  static styles = [sharedStyles];\n}\n","import { html } from \"lit-html\";\nimport \"@holochain-open-dev/profiles/elements/create-profile.js\";\nimport \"@holochain-open-dev/profiles/elements/profiles-context.js\";\nimport { ProfilesZomeMock } from \"@holochain-open-dev/profiles/mocks\";\nimport { ProfilesStore, ProfilesClient } from \"@holochain-open-dev/profiles\";\n\n// More on how to set up stories at: https://storybook.js.org/docs/7.0/web-components/writing-stories/introduction\nexport default {\n  title: \"Frontend/Elements/create-profile\",\n  tags: [\"autodocs\"],\n  component: \"create-profile\",\n  render: (args) =>\n    html` <profiles-context\n      .store=${new ProfilesStore(new ProfilesClient(new ProfilesZomeMock()))}\n    >\n      <create-profile />\n    </profiles-context>`,\n};\n\n// More on writing stories with args: https://storybook.js.org/docs/7.0/web-components/writing-stories/args\nexport const Demo = {};\n"],"names":[],"sourceRoot":""}