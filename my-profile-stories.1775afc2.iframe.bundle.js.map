{"version":3,"file":"my-profile-stories.1775afc2.iframe.bundle.js","mappings":";AAmEA;;AAMA;;;AAIA;;AA4BA;AAGA;;;AAOA;AACA;;;;;AAOA;;;;AAKA;AAGA;;;AAGA;;AAEA;;AAYA;AAEA;;;AAMA;AACA;;AAIA;;;;;;AApIA;;;;;;ACuBA;;;AAGA;AACA;AACA;;;AAKA;;ACyBA;AACA;AACA;AACA;;;AAIA;;;;AAOA;;;;;;AAMA;;AAGA;AACA;AACA;;;;AAKA;;AAEA;AACA;AACA;;;;;AAOA;;;AAKA;;;AAIA;;AAEA;;AAEA;;;AAIA;;;;AAKA;;;;ACvFA;;;AAKA;;AAGA;;;AAgBA;;AAEA;;;;;;;;AAQA;;AAvBA;;;;;AAMA;;AAsBA;;;;;;;;;;;;;;;AAoBA;;;;;;;AAUA;AAIA;AACA;AAGA;;;;;;;;;;ACzFA;;;;;AAWA;AAIA;AACA;AAGA;;;;;AAYA;;;;;ACxBA;AAEA;;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAGA;;;;AAWA;AC/CA;AACA;AAGA;AACA;;AAEA;;AAEA;;;AAIA;AC3BA;;;AAOA","sources":["webpack://@holochain-open-dev/profiles-dev/../../src/elements/agent-avatar.ts","webpack://@holochain-open-dev/profiles-dev/../../src/elements/create-profile.ts","webpack://@holochain-open-dev/profiles-dev/../../src/elements/edit-profile.ts","webpack://@holochain-open-dev/profiles-dev/../../src/elements/profile-detail.ts","webpack://@holochain-open-dev/profiles-dev/../../src/elements/profile-prompt.ts","webpack://@holochain-open-dev/profiles-dev/../../src/elements/update-profile.ts","webpack://@holochain-open-dev/profiles-dev/../../src/elements/my-profile.ts","webpack://@holochain-open-dev/profiles-dev/./stories/my-profile.stories.js"],"sourcesContent":["import { consume } from \"@lit-labs/context\";\nimport { hashProperty, sharedStyles } from \"@holochain-open-dev/elements\";\nimport { css, html, LitElement } from \"lit\";\nimport { state, property, customElement } from \"lit/decorators.js\";\nimport { styleMap } from \"lit-html/directives/style-map.js\";\nimport { AgentPubKey, encodeHashToBase64 } from \"@holochain/client\";\nimport { localized, msg } from \"@lit/localize\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { SlTooltip } from \"@shoelace-style/shoelace\";\n\nimport \"@holochain-open-dev/elements/elements/display-error.js\";\nimport \"@holochain-open-dev/elements/elements/holo-identicon.js\";\nimport \"@shoelace-style/shoelace/dist/components/avatar/avatar.js\";\nimport \"@shoelace-style/shoelace/dist/components/skeleton/skeleton.js\";\nimport \"@shoelace-style/shoelace/dist/components/tooltip/tooltip.js\";\n\nimport { profilesStoreContext } from \"../context.js\";\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { Profile } from \"../types.js\";\n\n@localized()\n@customElement(\"agent-avatar\")\nexport class AgentAvatar extends LitElement {\n  /** Public properties */\n\n  /**\n   * REQUIRED. The public key identifying the agent whose profile is going to be shown.\n   */\n  @property(hashProperty(\"agent-pub-key\"))\n  agentPubKey!: AgentPubKey;\n\n  /**\n   * Size of the avatar image in pixels.\n   */\n  @property({ type: Number })\n  size = 32;\n\n  /**\n   * Copy AgentPubKey to clipboard on click\n   */\n  @property({ type: Boolean })\n  copyOnClick = false;\n\n  /**\n   * Show tooltip on hover with truncated AgentPubKey\n   */\n  @property({ type: Boolean })\n  showOnHover = false;\n\n  /** Dependencies */\n\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /**\n   * @internal\n   */\n  private _agentProfile = new StoreSubscriber(this, () =>\n    this.store.profiles.get(this.agentPubKey)\n  );\n\n  renderIdenticon() {\n    return html` <div\n      style=${styleMap({\n        position: \"relative\",\n        height: `${this.size}px`,\n        width: `${this.size}px`,\n      })}\n    >\n      <holo-identicon .hash=${this.agentPubKey} .size=${this.size}>\n      </holo-identicon>\n      <div class=\"badge\"><slot name=\"badge\"></slot></div>\n    </div>`;\n  }\n\n  @state()\n  justCopiedHash = false;\n\n  timeout: any;\n\n  async copyHash() {\n    await navigator.clipboard.writeText(encodeHashToBase64(this.agentPubKey));\n\n    if (this.timeout) clearTimeout(this.timeout);\n\n    this.justCopiedHash = true;\n    (this.shadowRoot!.getElementById(\"tooltip\") as SlTooltip).show();\n\n    this.timeout = setTimeout(() => {\n      (this.shadowRoot!.getElementById(\"tooltip\") as SlTooltip).hide();\n      setTimeout(() => {\n        this.justCopiedHash = false;\n      }, 100);\n    }, 2000);\n  }\n\n  renderProfile(profile: Profile | undefined) {\n    if (!profile || !profile.fields.avatar) return this.renderIdenticon();\n\n    const contents = html`\n      <div\n        @click=${() => {\n          if (this.copyOnClick) this.copyHash();\n        }}\n        style=${styleMap({\n          position: \"relative\",\n          height: `${this.size}px`,\n          width: `${this.size}px`,\n        })}\n      >\n        <sl-avatar\n          .image=${profile.fields.avatar}\n          style=\"--size: ${this.size}px;\"\n        >\n        </sl-avatar>\n        <div class=\"badge\"><slot name=\"badge\"></slot></div>\n      </div>\n    `;\n\n    return this.showOnHover ?\n      html`\n        <sl-tooltip\n          id=\"tooltip\"\n          placement=\"top\"\n          .content=${this.justCopiedHash\n            ? msg(\"Copied!\")\n            : `${encodeHashToBase64(this.agentPubKey).substring(0, 6)}...`}\n          .trigger=${this.justCopiedHash ? \"manual\" : \"hover focus\"}\n          hoist\n        >\n          ${contents}\n        </sl-tooltip>\n      ` : \n      contents;\n  }\n\n  render() {\n    if (this.store.config.avatarMode === \"identicon\")\n      return this.renderIdenticon();\n\n    switch (this._agentProfile.value.status) {\n      case \"pending\":\n        return html`<sl-skeleton\n          effect=\"pulse\"\n          style=\"height: ${this.size}px; width: ${this.size}px\"\n        ></sl-skeleton>`;\n      case \"complete\":\n        return this.renderProfile(this._agentProfile.value.value);\n      case \"error\":\n        return html`\n          <display-error\n            tooltip\n            .headline=${msg(\"Error fetching the agent's avatar\")}\n            .error=${this._agentProfile.value.error.data.data}\n          ></display-error>\n        `;\n    }\n  }\n\n  static styles = [\n    sharedStyles,\n    css`\n      .badge {\n        position: absolute;\n        right: 0;\n        bottom: 0;\n      }\n    `,\n  ];\n}\n","import { html, LitElement } from \"lit\";\nimport { property, customElement } from \"lit/decorators.js\";\nimport { consume } from \"@lit-labs/context\";\nimport { localized, msg } from \"@lit/localize\";\nimport { sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport \"@shoelace-style/shoelace/dist/components/card/card.js\";\nimport \"./edit-profile.js\";\n\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { profilesStoreContext } from \"../context.js\";\nimport { Profile } from \"../types.js\";\n\n/**\n * A custom element that fires event on value change.\n *\n * @element create-profile\n * @fires profile-created - Fired after the profile has been created. Detail will have this shape: { profile: { nickname, fields } }\n */\n@localized()\n@customElement(\"create-profile\")\nexport class CreateProfile extends LitElement {\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /** Private properties */\n\n  async createProfile(profile: Profile) {\n    await this.store.client.createProfile(profile);\n\n    this.dispatchEvent(\n      new CustomEvent(\"profile-created\", {\n        detail: {\n          profile,\n        },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  render() {\n    return html`\n      <sl-card>\n        <div class=\"column\">\n          <span\n            class=\"title\"\n            style=\"margin-bottom: 16px; align-self: flex-start\"\n            >${msg(\"Create Profile\")}</span\n          >\n          <edit-profile\n            .saveProfileLabel=${msg(\"Create Profile\")}\n            .store=${this.store}\n            @save-profile=${(e: CustomEvent) =>\n              this.createProfile(e.detail.profile)}\n          ></edit-profile></div\n      ></sl-card>\n    `;\n  }\n\n  static styles = [sharedStyles];\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators.js\";\nimport { localized, msg, str } from \"@lit/localize\";\nimport { consume } from \"@lit-labs/context\";\nimport { onSubmit, sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport \"@shoelace-style/shoelace/dist/components/avatar/avatar.js\";\nimport \"@shoelace-style/shoelace/dist/components/button/button.js\";\nimport \"@shoelace-style/shoelace/dist/components/input/input.js\";\nimport \"@shoelace-style/shoelace/dist/components/icon/icon.js\";\nimport \"@holochain-open-dev/elements/elements/select-avatar.js\";\n\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { profilesStoreContext } from \"../context.js\";\nimport { Profile } from \"../types.js\";\nimport { FieldConfig } from \"../config.js\";\n\n/**\n * @element edit-profile\n * @fires save-profile - Fired when the save profile button is clicked\n */\n@localized()\n@customElement(\"edit-profile\")\nexport class EditProfile extends LitElement {\n  /**\n   * The profile to be edited.\n   */\n  @property({ type: Object })\n  profile: Profile | undefined;\n\n  /**\n   * Label for the save profile button.\n   */\n  @property({ type: String, attribute: \"save-profile-label\" })\n  saveProfileLabel: string | undefined;\n\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  @property({ type: Boolean, attribute: \"allow-cancel\" })\n  allowCancel = false;\n\n  /** Private properties */\n\n  avatarMode() {\n    return (\n      this.store.config.avatarMode === \"avatar-required\" ||\n      this.store.config.avatarMode === \"avatar-optional\"\n    );\n  }\n\n  fireSaveProfile(fields: Record<string, string>) {\n    const nickname = fields[\"nickname\"];\n    delete fields[\"nickname\"];\n\n    const profile: Profile = {\n      fields,\n      nickname,\n    };\n\n    this.dispatchEvent(\n      new CustomEvent(\"save-profile\", {\n        detail: {\n          profile,\n        },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  fireCancel() {\n    this.dispatchEvent(\n      new CustomEvent(\"cancel-edit-profile\", {\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  renderField(fieldConfig: FieldConfig) {\n    return html`\n      <sl-input\n        name=\"${fieldConfig.name}\"\n        .required=${fieldConfig.required}\n        .label=${fieldConfig.label}\n        .value=${this.profile?.fields[fieldConfig.name] || \"\"}\n        style=\"margin-bottom: 16px;\"\n      ></sl-input>\n    `;\n  }\n\n  render() {\n    return html`\n      <form\n        id=\"profile-form\"\n        class=\"column\"\n        ${onSubmit((fields) => this.fireSaveProfile(fields))}\n      >\n        <div\n          class=\"row\"\n          style=\"justify-content: center; align-self: start; margin-bottom: 16px\"\n        >\n          ${this.avatarMode()\n            ? html` <select-avatar\n                name=\"avatar\"\n                .value=${this.profile?.fields[\"avatar\"] || undefined}\n                .required=${this.store.config.avatarMode === \"avatar-required\"}\n              ></select-avatar>`\n            : html``}\n\n          <sl-input\n            name=\"nickname\"\n            .label=${msg(\"Nickname\")}\n            required\n            minLength=\"${this.store.config.minNicknameLength}\"\n            .value=${this.profile?.nickname || \"\"}\n            .helpText=${msg(\n              str`Min. ${this.store.config.minNicknameLength} characters`\n            )}\n            style=\"margin-left: 16px;\"\n          ></sl-input>\n        </div>\n\n        ${this.store.config.additionalFields.map((field) =>\n          this.renderField(field)\n        )}\n\n        <div class=\"row\" style=\"margin-top: 8px;\">\n          ${this.allowCancel\n            ? html`\n                <sl-button\n                  style=\"flex: 1; margin-right: 6px;\"\n                  @click=${() => this.fireCancel()}\n                >\n                  ${msg(\"Cancel\")}\n                </sl-button>\n              `\n            : html``}\n\n          <sl-button style=\"flex: 1;\" variant=\"primary\" type=\"submit\"\n            >${this.saveProfileLabel ?? msg(\"Save Profile\")}\n          </sl-button>\n        </div>\n      </form>\n    `;\n  }\n\n  static styles = [sharedStyles];\n}\n","import { consume } from \"@lit-labs/context\";\nimport { AgentPubKey } from \"@holochain/client\";\nimport { html, LitElement } from \"lit\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { localized, msg } from \"@lit/localize\";\nimport { hashProperty, sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport \"@holochain-open-dev/elements/elements/display-error.js\";\nimport \"@shoelace-style/shoelace/dist/components/skeleton/skeleton.js\";\nimport \"./agent-avatar.js\";\n\nimport { profilesStoreContext } from \"../context.js\";\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { Profile } from \"../types.js\";\n\n/**\n * @element profile-detail\n */\n@localized()\n@customElement(\"profile-detail\")\nexport class ProfileDetail extends LitElement {\n  /** Public properties */\n\n  /**\n   * REQUIRED. Public key identifying the agent for which the profile should be shown\n   */\n  @property(hashProperty(\"agent-pub-key\"))\n  agentPubKey!: AgentPubKey;\n\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /** Private properties */\n\n  /**\n   * @internal\n   */\n  private _agentProfile = new StoreSubscriber(this, () =>\n    this.store.profiles.get(this.agentPubKey)\n  );\n\n  getAdditionalFields(profile: Profile): Record<string, string> {\n    const fields: Record<string, string> = {};\n\n    for (const [key, value] of Object.entries(profile.fields)) {\n      if (key !== \"avatar\") {\n        fields[key] = value;\n      }\n    }\n\n    return fields;\n  }\n\n  renderAdditionalField(fieldId: string, fieldValue: string) {\n    return html`\n      <div class=\"column\" style=\"margin-top: 16px\">\n        <span style=\"margin-bottom: 8px; \">\n          <strong\n            >${fieldId.substring(0, 1).toUpperCase()}${fieldId.substring(\n              1\n            )}</strong\n          ></span\n        >\n        <span>${fieldValue}</span>\n      </div>\n    `;\n  }\n\n  renderProfile(profile: Profile | undefined) {\n    if (!profile)\n      return html`<div\n        class=\"column\"\n        style=\"align-items: center; justify-content: center; flex: 1;\"\n      >\n        <span class=\"placeholder\"\n          >${msg(\"This agent hasn't created a profile yet\")}</span\n        >\n      </div>`;\n\n    return html`\n      <div class=\"column\">\n        <div class=\"row\" style=\"align-items: center\">\n          <agent-avatar .agentPubKey=${this.agentPubKey} showOnHover copyOnClick></agent-avatar>\n          <span style=\"font-size: 16px; margin-left: 8px;\"\n            >${profile.nickname}</span\n          >\n\n          <span style=\"flex: 1\"></span>\n\n          <slot name=\"action\"></slot>\n        </div>\n\n        ${Object.entries(this.getAdditionalFields(profile))\n          .filter(([, value]) => value !== \"\")\n          .map(([key, value]) => this.renderAdditionalField(key, value))}\n      </div>\n    `;\n  }\n\n  render() {\n    switch (this._agentProfile.value.status) {\n      case \"pending\":\n        return html`\n          <div class=\"column\">\n            <div class=\"row\" style=\"align-items: center\">\n              <sl-skeleton\n                effect=\"pulse\"\n                style=\"height: 32px; width: 32px; border-radius: 50%;\"\n              ></sl-skeleton>\n              <div>\n                <sl-skeleton\n                  effect=\"pulse\"\n                  style=\"width: 122px; margin-left: 8px;\"\n                ></sl-skeleton>\n              </div>\n            </div>\n\n            ${this.store.config.additionalFields.map(\n              () => html`\n                <sl-skeleton\n                  effect=\"pulse\"\n                  style=\"width: 200px; margin-top: 16px;\"\n                ></sl-skeleton>\n              `\n            )}\n          </div>\n        `;\n      case \"complete\":\n        return this.renderProfile(this._agentProfile.value.value);\n      case \"error\":\n        return html`<display-error\n          .headline=${msg(\"Error fetching the profile\")}\n          .error=${this._agentProfile.value.error.data.data}\n        ></display-error>`;\n    }\n  }\n\n  static styles = [sharedStyles];\n}\n","import { css, html, LitElement } from \"lit\";\nimport { property, customElement } from \"lit/decorators.js\";\nimport { localized, msg } from \"@lit/localize\";\nimport { consume } from \"@lit-labs/context\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport \"@shoelace-style/shoelace/dist/components/spinner/spinner.js\";\nimport \"@holochain-open-dev/elements/elements/display-error.js\";\n\nimport \"./create-profile.js\";\n\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { profilesStoreContext } from \"../context.js\";\nimport { Profile } from \"../types.js\";\n\n/**\n * @element profile-prompt\n * @slot hero - Will be displayed above the create-profile form when the user is prompted with it\n */\n@localized()\n@customElement(\"profile-prompt\")\nexport class ProfilePrompt extends LitElement {\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /** Private properties */\n\n  /**\n   * @internal\n   */\n  private _myProfile = new StoreSubscriber(this, () => this.store.myProfile);\n\n  renderPrompt(myProfile: Profile | undefined) {\n    if (myProfile) return html`<slot></slot>`;\n\n    return html`\n      <div\n        class=\"column\"\n        style=\"align-items: center; justify-content: center; flex: 1; padding-bottom: 10px;\"\n      >\n        <div class=\"column\" style=\"align-items: center;\">\n          <slot name=\"hero\"></slot>\n          <create-profile></create-profile>\n        </div>\n      </div>\n    `;\n  }\n\n  render() {\n    switch (this._myProfile.value.status) {\n      case \"pending\":\n        return html` <div\n          class=\"column\"\n          style=\"align-items: center; justify-content: center; flex: 1;\"\n        >\n          <sl-spinner style=\"font-size: 2rem;\"></sl-spinner>\n        </div>`;\n      case \"complete\":\n        return this.renderPrompt(this._myProfile.value.value);\n      case \"error\":\n        return html`<display-error\n          .headline=${msg(\"Error fetching your profile\")}\n          .error=${this._myProfile.value.error}\n        ></display-error> `;\n    }\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: flex;\n          flex: 1;\n        }\n      `,\n    ];\n  }\n}\n","import { html, css, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { consume } from \"@lit-labs/context\";\nimport { localized, msg } from \"@lit/localize\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport \"@holochain-open-dev/elements/elements/display-error.js\";\nimport \"@shoelace-style/shoelace/dist/components/spinner/spinner.js\";\n\nimport \"./edit-profile.js\";\n\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { profilesStoreContext } from \"../context.js\";\nimport { Profile } from \"../types.js\";\n\n/**\n * @element update-profile\n * @fires profile-updated - Fired after the profile has been created. Detail will have this shape: { profile: { nickname, fields } }\n */\n@localized()\n@customElement(\"update-profile\")\nexport class UpdateProfile extends LitElement {\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /**\n   * @internal\n   */\n  private _myProfile = new StoreSubscriber(this, () => this.store.myProfile);\n\n  async updateProfile(profile: Profile) {\n    await this.store.client.updateProfile(profile);\n\n    this.dispatchEvent(\n      new CustomEvent(\"profile-updated\", {\n        detail: {\n          profile,\n        },\n        bubbles: true,\n        composed: true,\n      })\n    );\n  }\n\n  render() {\n    switch (this._myProfile.value.status) {\n      case \"pending\":\n        return html`<div\n          class=\"column\"\n          style=\"align-items: center; justify-content: center; flex: 1;\"\n        >\n          <sl-spinner></sl-spinner>\n        </div>`;\n      case \"complete\":\n        return html` <edit-profile\n          .allowCancel=${true}\n          style=\"margin-top: 16px; flex: 1\"\n          .profile=${this._myProfile.value.value}\n          .saveProfileLabel=${msg(\"Update Profile\")}\n          @save-profile=${(e: CustomEvent) =>\n            this.updateProfile(e.detail.profile)}\n        ></edit-profile>`;\n      case \"error\":\n        return html`<display-error\n          .headline=${msg(\"Error fetching your profile\")}\n          .error=${this._myProfile.value.error.data.data}\n        ></display-error>`;\n    }\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: flex;\n        }\n      `,\n    ];\n  }\n}\n","import { consume } from \"@lit-labs/context\";\nimport { html, LitElement } from \"lit\";\nimport { property, state, customElement } from \"lit/decorators.js\";\nimport { sharedStyles, wrapPathInSvg } from \"@holochain-open-dev/elements\";\nimport { mdiPencil } from \"@mdi/js\";\n\nimport \"@shoelace-style/shoelace/dist/components/icon-button/icon-button.js\";\n\nimport { profilesStoreContext } from \"../context.js\";\nimport { ProfilesStore } from \"../profiles-store.js\";\n\nimport \"./update-profile.js\";\nimport \"./profile-detail.js\";\n\n/**\n * @element my-profile\n */\n@customElement(\"my-profile\")\nexport class MyProfile extends LitElement {\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /** Private properties */\n\n  /**\n   * @internal\n   */\n  @state()\n  private _editing = false;\n\n  render() {\n    if (this._editing)\n      return html`<update-profile\n        @profile-updated=${() => (this._editing = false)}\n        @cancel-edit-profile=${() => (this._editing = false)}\n      ></update-profile>`;\n\n    return html`\n      <profile-detail .agentPubKey=${this.store.client.client.myPubKey}>\n        <sl-icon-button\n          src=\"${wrapPathInSvg(mdiPencil)}\"\n          slot=\"action\"\n          @click=${() => (this._editing = true)}\n        ></sl-icon-button>\n      </profile-detail>\n    `;\n  }\n\n  static styles = [sharedStyles];\n}\n","import { html } from \"lit-html\";\nimport \"@holochain-open-dev/profiles/elements/my-profile.js\";\nimport \"@holochain-open-dev/profiles/elements/profile-prompt.js\";\nimport \"@holochain-open-dev/profiles/elements/profiles-context.js\";\nimport { decodeHashFromBase64 } from \"@holochain/client\";\nimport {\n  ProfilesZomeMock,\n  demoProfiles,\n} from \"@holochain-open-dev/profiles/mocks\";\nimport { ProfilesStore, ProfilesClient } from \"@holochain-open-dev/profiles\";\n\nconst mock = new ProfilesZomeMock(\n  demoProfiles(),\n  decodeHashFromBase64(\"uhCAk8OKb2hznzG023xxh_vR3Q7Y4IEOAo4B0QN7ZhbGYeww\")\n);\n\n// More on how to set up stories at: https://storybook.js.org/docs/7.0/web-components/writing-stories/introduction\nexport default {\n  title: \"Frontend/Elements/my-profile\",\n  tags: [\"autodocs\"],\n  component: \"my-profile\",\n  render: (args) =>\n    html` <profiles-context\n      .store=${new ProfilesStore(new ProfilesClient(mock))}\n    >\n      <my-profile></my-profile>\n    </profiles-context>`,\n};\n\n// More on writing stories with args: https://storybook.js.org/docs/7.0/web-components/writing-stories/args\nexport const Demo = {};\n"],"names":[],"sourceRoot":""}