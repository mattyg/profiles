{"version":3,"file":"search-agent-stories.ca146ce9.iframe.bundle.js","mappings":";AAmEA;;AAMA;;;AAIA;;AA4BA;AAGA;;;AAOA;AACA;;;;;AAOA;;;;AAKA;AAGA;;;AAGA;;AAEA;;AAYA;AAEA;;;AAMA;AACA;;AAIA;;;;;;AApIA;;;;;;;;;;ACNA;;;;AAWA;;;;;;;;;;;;ACuKA;;;;AAKA;AACA;;AAGA;AAIA;AAGA;AACA;AAEA;;;AAGA;;;AAGA;;;;;;;;;AA2BA;AACA;AACA;;;AAGA;;AAMA;;;;AAKA;;;;;;;;AAeA;AC/QA;;AAMA","sources":["webpack://@holochain-open-dev/profiles-dev/../../src/elements/agent-avatar.ts","webpack://@holochain-open-dev/profiles-dev/../../src/elements/profile-list-item-skeleton.ts","webpack://@holochain-open-dev/profiles-dev/../../src/elements/search-agent.ts","webpack://@holochain-open-dev/profiles-dev/./stories/search-agent.stories.js"],"sourcesContent":["import { consume } from \"@lit-labs/context\";\nimport { hashProperty, sharedStyles } from \"@holochain-open-dev/elements\";\nimport { css, html, LitElement } from \"lit\";\nimport { state, property, customElement } from \"lit/decorators.js\";\nimport { styleMap } from \"lit-html/directives/style-map.js\";\nimport { AgentPubKey, encodeHashToBase64 } from \"@holochain/client\";\nimport { localized, msg } from \"@lit/localize\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { SlTooltip } from \"@shoelace-style/shoelace\";\n\nimport \"@holochain-open-dev/elements/elements/display-error.js\";\nimport \"@holochain-open-dev/elements/elements/holo-identicon.js\";\nimport \"@shoelace-style/shoelace/dist/components/avatar/avatar.js\";\nimport \"@shoelace-style/shoelace/dist/components/skeleton/skeleton.js\";\nimport \"@shoelace-style/shoelace/dist/components/tooltip/tooltip.js\";\n\nimport { profilesStoreContext } from \"../context.js\";\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { Profile } from \"../types.js\";\n\n@localized()\n@customElement(\"agent-avatar\")\nexport class AgentAvatar extends LitElement {\n  /** Public properties */\n\n  /**\n   * REQUIRED. The public key identifying the agent whose profile is going to be shown.\n   */\n  @property(hashProperty(\"agent-pub-key\"))\n  agentPubKey!: AgentPubKey;\n\n  /**\n   * Size of the avatar image in pixels.\n   */\n  @property({ type: Number })\n  size = 32;\n\n  /**\n   * Copy AgentPubKey to clipboard on click\n   */\n  @property({ type: Boolean })\n  copyOnClick = false;\n\n  /**\n   * Show tooltip on hover with truncated AgentPubKey\n   */\n  @property({ type: Boolean })\n  showOnHover = false;\n\n  /** Dependencies */\n\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /**\n   * @internal\n   */\n  private _agentProfile = new StoreSubscriber(this, () =>\n    this.store.profiles.get(this.agentPubKey)\n  );\n\n  renderIdenticon() {\n    return html` <div\n      style=${styleMap({\n        position: \"relative\",\n        height: `${this.size}px`,\n        width: `${this.size}px`,\n      })}\n    >\n      <holo-identicon .hash=${this.agentPubKey} .size=${this.size}>\n      </holo-identicon>\n      <div class=\"badge\"><slot name=\"badge\"></slot></div>\n    </div>`;\n  }\n\n  @state()\n  justCopiedHash = false;\n\n  timeout: any;\n\n  async copyHash() {\n    await navigator.clipboard.writeText(encodeHashToBase64(this.agentPubKey));\n\n    if (this.timeout) clearTimeout(this.timeout);\n\n    this.justCopiedHash = true;\n    (this.shadowRoot!.getElementById(\"tooltip\") as SlTooltip).show();\n\n    this.timeout = setTimeout(() => {\n      (this.shadowRoot!.getElementById(\"tooltip\") as SlTooltip).hide();\n      setTimeout(() => {\n        this.justCopiedHash = false;\n      }, 100);\n    }, 2000);\n  }\n\n  renderProfile(profile: Profile | undefined) {\n    if (!profile || !profile.fields.avatar) return this.renderIdenticon();\n\n    const contents = html`\n      <div\n        @click=${() => {\n          if (this.copyOnClick) this.copyHash();\n        }}\n        style=${styleMap({\n          position: \"relative\",\n          height: `${this.size}px`,\n          width: `${this.size}px`,\n        })}\n      >\n        <sl-avatar\n          .image=${profile.fields.avatar}\n          style=\"--size: ${this.size}px;\"\n        >\n        </sl-avatar>\n        <div class=\"badge\"><slot name=\"badge\"></slot></div>\n      </div>\n    `;\n\n    return this.showOnHover ?\n      html`\n        <sl-tooltip\n          id=\"tooltip\"\n          placement=\"top\"\n          .content=${this.justCopiedHash\n            ? msg(\"Copied!\")\n            : `${encodeHashToBase64(this.agentPubKey).substring(0, 6)}...`}\n          .trigger=${this.justCopiedHash ? \"manual\" : \"hover focus\"}\n          hoist\n        >\n          ${contents}\n        </sl-tooltip>\n      ` : \n      contents;\n  }\n\n  render() {\n    if (this.store.config.avatarMode === \"identicon\")\n      return this.renderIdenticon();\n\n    switch (this._agentProfile.value.status) {\n      case \"pending\":\n        return html`<sl-skeleton\n          effect=\"pulse\"\n          style=\"height: ${this.size}px; width: ${this.size}px\"\n        ></sl-skeleton>`;\n      case \"complete\":\n        return this.renderProfile(this._agentProfile.value.value);\n      case \"error\":\n        return html`\n          <display-error\n            tooltip\n            .headline=${msg(\"Error fetching the agent's avatar\")}\n            .error=${this._agentProfile.value.error.data.data}\n          ></display-error>\n        `;\n    }\n  }\n\n  static styles = [\n    sharedStyles,\n    css`\n      .badge {\n        position: absolute;\n        right: 0;\n        bottom: 0;\n      }\n    `,\n  ];\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement } from \"lit/decorators.js\";\nimport { sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport \"@shoelace-style/shoelace/dist/components/skeleton/skeleton.js\";\n\n/**\n * @element profile-list-item-skeleton\n */\n@customElement(\"profile-list-item-skeleton\")\nexport class ProfileListItemSkeleton extends LitElement {\n  render() {\n    return html`<div class=\"row\" style=\"align-items: center; width: 150px\">\n      <sl-skeleton\n        effect=\"sheen\"\n        style=\"height: 32px; width: 32px; border-radius: 50%; margin: 8px\"\n      ></sl-skeleton\n      ><sl-skeleton\n        effect=\"sheen\"\n        style=\"flex: 1; margin: 8px; border-radius: 12px\"\n      >\n      </sl-skeleton>\n    </div>`;\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: flex;\n        }\n      `,\n    ];\n  }\n}\n","import { customElement, property, state, query } from \"lit/decorators.js\";\nimport { css, html, LitElement } from \"lit\";\nimport { consume } from \"@lit-labs/context\";\nimport { localized, msg } from \"@lit/localize\";\nimport {\n  AgentPubKey,\n  decodeHashFromBase64,\n  encodeHashToBase64,\n} from \"@holochain/client\";\nimport { AsyncStatus, StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport {\n  FormField,\n  FormFieldController,\n  hashProperty,\n  sharedStyles,\n} from \"@holochain-open-dev/elements\";\n\nimport \"@holochain-open-dev/elements/elements/display-error.js\";\nimport \"@shoelace-style/shoelace/dist/components/skeleton/skeleton.js\";\nimport \"@shoelace-style/shoelace/dist/components/menu/menu.js\";\nimport \"@shoelace-style/shoelace/dist/components/menu-item/menu-item.js\";\nimport \"@shoelace-style/shoelace/dist/components/dropdown/dropdown.js\";\nimport SlInput from \"@shoelace-style/shoelace/dist/components/input/input\";\n\nimport \"./agent-avatar.js\";\nimport \"./profile-list-item-skeleton.js\";\n\nimport { Profile } from \"../types.js\";\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { profilesStoreContext } from \"../context.js\";\nimport SlDropdown from \"@shoelace-style/shoelace/dist/components/dropdown/dropdown.js\";\n\n/**\n * @element search-agent\n * @fires agent-selected - Fired when the user selects some agent. Detail will have this shape: { agentPubKey: HoloHash }\n */\n@localized()\n@customElement(\"search-agent\")\nexport class SearchAgent extends LitElement implements FormField {\n  /** Form field properties */\n\n  /**\n   * The name of the field if this element is used inside a form\n   * Required only if the element is used inside a form\n   */\n  @property()\n  name!: string;\n\n  /**\n   * The default value of the field if this element is used inside a form\n   */\n  @property(hashProperty(\"default-value\"))\n  defaultValue: AgentPubKey | undefined;\n\n  /**\n   * Whether this field is required if this element is used inside a form\n   */\n  @property()\n  required = false;\n\n  /**\n   * Whether this field is disabled if this element is used inside a form\n   */\n  @property()\n  disabled = false;\n\n  /** Public attributes */\n\n  /**\n   * Whether to clear the field when an agent is selected.\n   * @attr clear-on-select\n   */\n  @property({ type: Boolean, attribute: \"clear-on-select\" })\n  clearOnSelect = false;\n\n  /**\n   * Whether to include my own agent as a possible agent to select.\n   * @attr include-myself\n   */\n  @property({ type: Boolean, attribute: \"include-myself\" })\n  includeMyself = false;\n\n  /**\n   * Label for the agent searching field.\n   * @attr field-label\n   */\n  @property({ type: String, attribute: \"field-label\" })\n  fieldLabel!: string;\n\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /**\n   * @internal\n   */\n  @state()\n  value!: AgentPubKey | undefined;\n\n  /**\n   * @internal\n   */\n  _controller = new FormFieldController(this);\n\n  reportValidity() {\n    const invalid = this.required !== false && this.value === undefined;\n\n    if (invalid) {\n      this._textField.setCustomValidity(`This field is required`);\n      this._textField.reportValidity();\n    }\n\n    return invalid;\n  }\n\n  async reset() {\n    this.value = this.defaultValue;\n    if (this.defaultValue) {\n      const profile = await this.store.client.getAgentProfile(\n        this.defaultValue\n      );\n      this._textField.value = profile?.nickname || \"\";\n    } else {\n      this._textField.value = \"\";\n    }\n  }\n\n  /**\n   * @internal\n   */\n  @state()\n  private _searchProfiles:\n    | StoreSubscriber<AsyncStatus<ReadonlyMap<AgentPubKey, Profile>>>\n    | undefined;\n\n  /**\n   * @internal\n   */\n  @query(\"#textfield\")\n  private _textField!: SlInput;\n\n  /**\n   * @internal\n   */\n  @query(\"#dropdown\")\n  private dropdown!: SlDropdown;\n\n  onFilterChange() {\n    if ((this._textField as any).value.length < 3) {\n      this._searchProfiles = undefined;\n      return;\n    }\n\n    this.dropdown.show();\n    const store = this.store.searchProfiles((this._textField as any).value);\n    this._searchProfiles = new StoreSubscriber(this, () => store);\n  }\n\n  onUsernameSelected(agentPubKey: AgentPubKey) {\n    this.dispatchEvent(\n      new CustomEvent(\"agent-selected\", {\n        detail: {\n          agentPubKey,\n        },\n      })\n    );\n    this.value = agentPubKey;\n\n    // If the consumer says so, clear the field\n    if (this.clearOnSelect) {\n      this._textField.value = \"\";\n      this._searchProfiles = undefined;\n    } else if (this._searchProfiles?.value.status === \"complete\") {\n      this._textField.value =\n        this._searchProfiles.value.value.get(agentPubKey)!.nickname;\n    }\n    this.dropdown.hide();\n  }\n\n  renderAgentList() {\n    if (this._searchProfiles === undefined) return html``;\n    switch (this._searchProfiles.value.status) {\n      case \"pending\":\n        return Array(3).map(\n          () => html`\n            <sl-menu-item>\n              <sl-skeleton\n                effect=\"sheen\"\n                slot=\"prefix\"\n                style=\"height: 32px; width: 32px; border-radius: 50%; margin: 8px\"\n              ></sl-skeleton>\n              <sl-skeleton\n                effect=\"sheen\"\n                style=\"width: 100px; margin: 8px; border-radius: 12px\"\n              ></sl-skeleton>\n            </sl-menu-item>\n          `\n        );\n      case \"error\":\n        return html`\n          <display-error\n            style=\"flex: 1; display:flex\"\n            tooltip\n            .headline=${msg(\"Error searching agents\")}\n            .error=${this._searchProfiles.value.error.data.data}\n          ></display-error>\n        `;\n      case \"complete\": {\n        const agents = this._searchProfiles.value.value;\n        if (agents.size === 0)\n          return html`<sl-menu-item>\n            ${msg(\"No agents match the filter\")}\n          </sl-menu-item>`;\n\n        return html`\n          ${Array.from(agents.entries()).map(\n            ([pubkey, profile]) => html`\n              <sl-menu-item .value=${encodeHashToBase64(pubkey)}>\n                <agent-avatar\n                  slot=\"prefix\"\n                  .agentPubKey=${pubkey}\n                  style=\"margin-right: 16px\"\n                ></agent-avatar>\n                ${profile.nickname}\n              </sl-menu-item>\n            `\n          )}\n        `;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  get _label() {\n    let l = this.fieldLabel ? this.fieldLabel : msg(\"Search Agent\");\n\n    if (this.required !== false) l = `${l} *`;\n\n    return l;\n  }\n\n  render() {\n    return html`\n      <div style=\"flex: 1; display: flex;\">\n        <sl-dropdown id=\"dropdown\">\n          <sl-input\n            id=\"textfield\"\n            slot=\"trigger\"\n            .label=${this._label}\n            .placeholder=${msg(\"At least 3 chars...\")}\n            @input=${() => this.onFilterChange()}\n          ></sl-input>\n          <sl-menu\n            @sl-select=${(e: CustomEvent) => {\n              this.onUsernameSelected(\n                decodeHashFromBase64(e.detail.item.value)\n              );\n            }}\n          >\n            ${this.renderAgentList()}\n          </sl-menu>\n        </sl-dropdown>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: flex;\n        }\n        #list {\n          margin-top: 16px;\n          margin-left: 16px;\n        }\n      `,\n    ];\n  }\n\n  /**\n   * @ignore\n   */\n  // static get scopedElements() {\n  //   return {\n  //     \"sl-skeleton\": SlSkeleton,\n  //     \"agent-avatar\": AgentAvatar,\n  //     \"md-outlined-text-field\": MdOutlinedTextField,\n  //     \"md-menu-surface\": MdMenuSurface,\n  //     \"md-list\": MdList,\n  //     \"display-error\": DisplayError,\n  //     \"md-list-item\": MdListItem,\n  //     \"profile-list-item-skeleton\": ProfileListItemSkeleton,\n  //   };\n  // }\n}\n","import { html } from \"lit-html\";\nimport \"@holochain-open-dev/profiles/elements/search-agent.js\";\nimport \"@holochain-open-dev/profiles/elements/profiles-context.js\";\nimport { ProfilesZomeMock } from \"@holochain-open-dev/profiles/mocks\";\nimport { ProfilesStore, ProfilesClient } from \"@holochain-open-dev/profiles\";\n\n// More on how to set up stories at: https://storybook.js.org/docs/7.0/web-components/writing-stories/introduction\nexport default {\n  title: \"Frontend/Elements/search-agent\",\n  tags: [\"autodocs\"],\n  component: \"search-agent\",\n  render: (args) =>\n    html` <profiles-context\n      .store=${new ProfilesStore(new ProfilesClient(new ProfilesZomeMock()))}\n      ><div style=\"height: 200px\"><search-agent></search-agent></div\n    ></profiles-context>`,\n};\n\n// More on writing stories with args: https://storybook.js.org/docs/7.0/web-components/writing-stories/args\nexport const Demo = {};\n\n// export const Secondary = {\n//   args: {\n//     label: \"Button\",\n//   },\n// };\n\n// export const Large = {\n//   args: {\n//     size: \"large\",\n//     label: \"Button\",\n//   },\n// };\n\n// export const Small = {\n//   args: {\n//     size: \"small\",\n//     label: \"Button\",\n//   },\n// };\n"],"names":[],"sourceRoot":""}