{"version":3,"file":"profile-detail-stories.a9a57517.iframe.bundle.js","mappings":";;;;AA4DA;AAKA;AAGA;;;;;;AAMA;AAGA;;;AAGA;;AAGA;;;;;;;;;;;AAcA;ACxFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACmBA;;;;AASA;AC8BA;;AAMA;;;AAIA;;AA4BA;AAGA;;;AAOA;AACA;;;;;AAOA;;;;AAKA;AAGA;;;AAGA;;AAEA;;AAYA;AAEA;;;AAMA;AACA;;AAIA;;;;;;AApIA;;;;ACkCA;;;AAKA;;AAGA;;;AAgBA;;AAEA;;;;;;;;AAQA;;AAvBA;;;;;AAMA;;AAsBA;;;;;;;;;;;;;;;AAoBA;;;;;;;AAUA;AAIA;AACA;AAGA;AC7HA;;;AAGA;;AAMA","sources":["webpack://@holochain-open-dev/profiles-dev/./node_modules/@holochain-open-dev/elements/dist/elements/holo-identicon.js","webpack://@holochain-open-dev/profiles-dev/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.MQ7QFCHP.js","webpack://@holochain-open-dev/profiles-dev/./node_modules/@shoelace-style/shoelace/dist/chunks/chunk.KLGGXJV3.js","webpack://@holochain-open-dev/profiles-dev/../../src/elements/agent-avatar.ts","webpack://@holochain-open-dev/profiles-dev/../../src/elements/profile-detail.ts","webpack://@holochain-open-dev/profiles-dev/./stories/profile-detail.stories.js"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators.js\";\nimport renderIcon from \"@holo-host/identicon\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { encodeHashToBase64 } from \"@holochain/client\";\nimport { localized, msg } from \"@lit/localize\";\nimport \"@shoelace-style/shoelace/dist/components/tooltip/tooltip.js\";\nimport { hashProperty } from \"../holo-hash-property.js\";\nlet HoloIdenticon = class HoloIdenticon extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Size of the identicon in pixels.\n         */\n        this.size = 32;\n        /**\n         * Shape of the identicon.\n         */\n        this.shape = \"circle\";\n        this.justCopiedHash = false;\n    }\n    async copyHash() {\n        await navigator.clipboard.writeText(this.strHash);\n        if (this.timeout)\n            clearTimeout(this.timeout);\n        this.justCopiedHash = true;\n        this._tooltip.show();\n        this.timeout = setTimeout(() => {\n            this._tooltip.hide();\n            setTimeout(() => {\n                this.justCopiedHash = false;\n            }, 100);\n        }, 2000);\n    }\n    get strHash() {\n        return encodeHashToBase64(this.hash);\n    }\n    updated(changedValues) {\n        super.updated(changedValues);\n        if ((changedValues.has(\"hash\") &&\n            changedValues.get(\"hash\")?.toString() !== this.hash?.toString()) ||\n            changedValues.has(\"size\") ||\n            changedValues.has(\"value\")) {\n            renderIcon({\n                hash: this.hash,\n                size: this.size,\n            }, this._canvas);\n        }\n    }\n    renderCanvas() {\n        return html ` <canvas\n      id=\"canvas\"\n      width=\"1\"\n      height=\"1\"\n      class=${classMap({\n            square: this.shape === \"square\",\n            circle: this.shape === \"circle\",\n        })}\n    ></canvas>`;\n    }\n    render() {\n        return html `<div\n      @click=${() => this.copyHash()}\n      style=\"cursor: pointer; flex-grow: 0\"\n    >\n      <sl-tooltip\n        id=\"tooltip\"\n        placement=\"top\"\n        .content=${this.justCopiedHash\n            ? msg(\"Copied!\")\n            : `${this.strHash.substring(0, 6)}...`}\n        .trigger=${this.justCopiedHash ? \"manual\" : \"hover focus\"}\n        hoist\n      >\n        ${this.renderCanvas()}\n      </sl-tooltip>\n    </div>`;\n    }\n    static get styles() {\n        return css `\n      :host {\n        display: flex;\n      }\n\n      .square {\n        border-radius: 0%;\n      }\n      .circle {\n        border-radius: 50%;\n      }\n    `;\n    }\n};\n__decorate([\n    property(hashProperty(\"hash\"))\n], HoloIdenticon.prototype, \"hash\", void 0);\n__decorate([\n    property({ type: Number })\n], HoloIdenticon.prototype, \"size\", void 0);\n__decorate([\n    property({ type: String })\n], HoloIdenticon.prototype, \"shape\", void 0);\n__decorate([\n    query(\"#canvas\")\n], HoloIdenticon.prototype, \"_canvas\", void 0);\n__decorate([\n    query(\"#tooltip\")\n], HoloIdenticon.prototype, \"_tooltip\", void 0);\n__decorate([\n    state()\n], HoloIdenticon.prototype, \"justCopiedHash\", void 0);\nHoloIdenticon = __decorate([\n    localized(),\n    customElement(\"holo-identicon\")\n], HoloIdenticon);\nexport { HoloIdenticon };\n//# sourceMappingURL=holo-identicon.js.map","import {\n  component_styles_default\n} from \"./chunk.BCEYT3RT.js\";\nimport {\n  i\n} from \"./chunk.DUT32TWM.js\";\n\n// src/components/skeleton/skeleton.styles.ts\nvar skeleton_styles_default = i`\n  ${component_styles_default}\n\n  :host {\n    --border-radius: var(--sl-border-radius-pill);\n    --color: var(--sl-color-neutral-200);\n    --sheen-color: var(--sl-color-neutral-300);\n\n    display: block;\n    position: relative;\n  }\n\n  .skeleton {\n    display: flex;\n    width: 100%;\n    height: 100%;\n    min-height: 1rem;\n  }\n\n  .skeleton__indicator {\n    flex: 1 1 auto;\n    background: var(--color);\n    border-radius: var(--border-radius);\n  }\n\n  .skeleton--sheen .skeleton__indicator {\n    background: linear-gradient(270deg, var(--sheen-color), var(--color), var(--color), var(--sheen-color));\n    background-size: 400% 100%;\n    background-size: 400% 100%;\n    animation: sheen 8s ease-in-out infinite;\n  }\n\n  .skeleton--pulse .skeleton__indicator {\n    animation: pulse 2s ease-in-out 0.5s infinite;\n  }\n\n  /* Forced colors mode */\n  @media (forced-colors: active) {\n    :host {\n      --color: GrayText;\n    }\n  }\n\n  @keyframes sheen {\n    0% {\n      background-position: 200% 0;\n    }\n    to {\n      background-position: -200% 0;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.4;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n`;\n\nexport {\n  skeleton_styles_default\n};\n","import {\n  skeleton_styles_default\n} from \"./chunk.MQ7QFCHP.js\";\nimport {\n  o\n} from \"./chunk.ORW72H2K.js\";\nimport {\n  ShoelaceElement,\n  e,\n  e2\n} from \"./chunk.ROLL4627.js\";\nimport {\n  y\n} from \"./chunk.DUT32TWM.js\";\nimport {\n  __decorateClass\n} from \"./chunk.LKA3TPUC.js\";\n\n// src/components/skeleton/skeleton.ts\nvar SlSkeleton = class extends ShoelaceElement {\n  constructor() {\n    super(...arguments);\n    this.effect = \"none\";\n  }\n  render() {\n    return y`\n      <div\n        part=\"base\"\n        class=${o({\n      skeleton: true,\n      \"skeleton--pulse\": this.effect === \"pulse\",\n      \"skeleton--sheen\": this.effect === \"sheen\"\n    })}\n      >\n        <div part=\"indicator\" class=\"skeleton__indicator\"></div>\n      </div>\n    `;\n  }\n};\nSlSkeleton.styles = skeleton_styles_default;\n__decorateClass([\n  e2()\n], SlSkeleton.prototype, \"effect\", 2);\nSlSkeleton = __decorateClass([\n  e(\"sl-skeleton\")\n], SlSkeleton);\n\nexport {\n  SlSkeleton\n};\n","import { consume } from \"@lit-labs/context\";\nimport { hashProperty, sharedStyles } from \"@holochain-open-dev/elements\";\nimport { css, html, LitElement } from \"lit\";\nimport { state, property, customElement } from \"lit/decorators.js\";\nimport { styleMap } from \"lit-html/directives/style-map.js\";\nimport { AgentPubKey, encodeHashToBase64 } from \"@holochain/client\";\nimport { localized, msg } from \"@lit/localize\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { SlTooltip } from \"@shoelace-style/shoelace\";\n\nimport \"@holochain-open-dev/elements/elements/display-error.js\";\nimport \"@holochain-open-dev/elements/elements/holo-identicon.js\";\nimport \"@shoelace-style/shoelace/dist/components/avatar/avatar.js\";\nimport \"@shoelace-style/shoelace/dist/components/skeleton/skeleton.js\";\nimport \"@shoelace-style/shoelace/dist/components/tooltip/tooltip.js\";\n\nimport { profilesStoreContext } from \"../context.js\";\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { Profile } from \"../types.js\";\n\n@localized()\n@customElement(\"agent-avatar\")\nexport class AgentAvatar extends LitElement {\n  /** Public properties */\n\n  /**\n   * REQUIRED. The public key identifying the agent whose profile is going to be shown.\n   */\n  @property(hashProperty(\"agent-pub-key\"))\n  agentPubKey!: AgentPubKey;\n\n  /**\n   * Size of the avatar image in pixels.\n   */\n  @property({ type: Number })\n  size = 32;\n\n  /**\n   * Copy AgentPubKey to clipboard on click\n   */\n  @property({ type: Boolean })\n  copyOnClick = false;\n\n  /**\n   * Show tooltip on hover with truncated AgentPubKey\n   */\n  @property({ type: Boolean })\n  showOnHover = false;\n\n  /** Dependencies */\n\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /**\n   * @internal\n   */\n  private _agentProfile = new StoreSubscriber(this, () =>\n    this.store.profiles.get(this.agentPubKey)\n  );\n\n  renderIdenticon() {\n    return html` <div\n      style=${styleMap({\n        position: \"relative\",\n        height: `${this.size}px`,\n        width: `${this.size}px`,\n      })}\n    >\n      <holo-identicon .hash=${this.agentPubKey} .size=${this.size}>\n      </holo-identicon>\n      <div class=\"badge\"><slot name=\"badge\"></slot></div>\n    </div>`;\n  }\n\n  @state()\n  justCopiedHash = false;\n\n  timeout: any;\n\n  async copyHash() {\n    await navigator.clipboard.writeText(encodeHashToBase64(this.agentPubKey));\n\n    if (this.timeout) clearTimeout(this.timeout);\n\n    this.justCopiedHash = true;\n    (this.shadowRoot!.getElementById(\"tooltip\") as SlTooltip).show();\n\n    this.timeout = setTimeout(() => {\n      (this.shadowRoot!.getElementById(\"tooltip\") as SlTooltip).hide();\n      setTimeout(() => {\n        this.justCopiedHash = false;\n      }, 100);\n    }, 2000);\n  }\n\n  renderProfile(profile: Profile | undefined) {\n    if (!profile || !profile.fields.avatar) return this.renderIdenticon();\n\n    const contents = html`\n      <div\n        @click=${() => {\n          if (this.copyOnClick) this.copyHash();\n        }}\n        style=${styleMap({\n          position: \"relative\",\n          height: `${this.size}px`,\n          width: `${this.size}px`,\n        })}\n      >\n        <sl-avatar\n          .image=${profile.fields.avatar}\n          style=\"--size: ${this.size}px;\"\n        >\n        </sl-avatar>\n        <div class=\"badge\"><slot name=\"badge\"></slot></div>\n      </div>\n    `;\n\n    return this.showOnHover ?\n      html`\n        <sl-tooltip\n          id=\"tooltip\"\n          placement=\"top\"\n          .content=${this.justCopiedHash\n            ? msg(\"Copied!\")\n            : `${encodeHashToBase64(this.agentPubKey).substring(0, 6)}...`}\n          .trigger=${this.justCopiedHash ? \"manual\" : \"hover focus\"}\n          hoist\n        >\n          ${contents}\n        </sl-tooltip>\n      ` : \n      contents;\n  }\n\n  render() {\n    if (this.store.config.avatarMode === \"identicon\")\n      return this.renderIdenticon();\n\n    switch (this._agentProfile.value.status) {\n      case \"pending\":\n        return html`<sl-skeleton\n          effect=\"pulse\"\n          style=\"height: ${this.size}px; width: ${this.size}px\"\n        ></sl-skeleton>`;\n      case \"complete\":\n        return this.renderProfile(this._agentProfile.value.value);\n      case \"error\":\n        return html`\n          <display-error\n            tooltip\n            .headline=${msg(\"Error fetching the agent's avatar\")}\n            .error=${this._agentProfile.value.error.data.data}\n          ></display-error>\n        `;\n    }\n  }\n\n  static styles = [\n    sharedStyles,\n    css`\n      .badge {\n        position: absolute;\n        right: 0;\n        bottom: 0;\n      }\n    `,\n  ];\n}\n","import { consume } from \"@lit-labs/context\";\nimport { AgentPubKey } from \"@holochain/client\";\nimport { html, LitElement } from \"lit\";\nimport { StoreSubscriber } from \"@holochain-open-dev/stores\";\nimport { customElement, property } from \"lit/decorators.js\";\nimport { localized, msg } from \"@lit/localize\";\nimport { hashProperty, sharedStyles } from \"@holochain-open-dev/elements\";\n\nimport \"@holochain-open-dev/elements/elements/display-error.js\";\nimport \"@shoelace-style/shoelace/dist/components/skeleton/skeleton.js\";\nimport \"./agent-avatar.js\";\n\nimport { profilesStoreContext } from \"../context.js\";\nimport { ProfilesStore } from \"../profiles-store.js\";\nimport { Profile } from \"../types.js\";\n\n/**\n * @element profile-detail\n */\n@localized()\n@customElement(\"profile-detail\")\nexport class ProfileDetail extends LitElement {\n  /** Public properties */\n\n  /**\n   * REQUIRED. Public key identifying the agent for which the profile should be shown\n   */\n  @property(hashProperty(\"agent-pub-key\"))\n  agentPubKey!: AgentPubKey;\n\n  /**\n   * Profiles store for this element, not required if you embed this element inside a <profiles-context>\n   */\n  @consume({ context: profilesStoreContext, subscribe: true })\n  @property()\n  store!: ProfilesStore;\n\n  /** Private properties */\n\n  /**\n   * @internal\n   */\n  private _agentProfile = new StoreSubscriber(this, () =>\n    this.store.profiles.get(this.agentPubKey)\n  );\n\n  getAdditionalFields(profile: Profile): Record<string, string> {\n    const fields: Record<string, string> = {};\n\n    for (const [key, value] of Object.entries(profile.fields)) {\n      if (key !== \"avatar\") {\n        fields[key] = value;\n      }\n    }\n\n    return fields;\n  }\n\n  renderAdditionalField(fieldId: string, fieldValue: string) {\n    return html`\n      <div class=\"column\" style=\"margin-top: 16px\">\n        <span style=\"margin-bottom: 8px; \">\n          <strong\n            >${fieldId.substring(0, 1).toUpperCase()}${fieldId.substring(\n              1\n            )}</strong\n          ></span\n        >\n        <span>${fieldValue}</span>\n      </div>\n    `;\n  }\n\n  renderProfile(profile: Profile | undefined) {\n    if (!profile)\n      return html`<div\n        class=\"column\"\n        style=\"align-items: center; justify-content: center; flex: 1;\"\n      >\n        <span class=\"placeholder\"\n          >${msg(\"This agent hasn't created a profile yet\")}</span\n        >\n      </div>`;\n\n    return html`\n      <div class=\"column\">\n        <div class=\"row\" style=\"align-items: center\">\n          <agent-avatar .agentPubKey=${this.agentPubKey} showOnHover copyOnClick></agent-avatar>\n          <span style=\"font-size: 16px; margin-left: 8px;\"\n            >${profile.nickname}</span\n          >\n\n          <span style=\"flex: 1\"></span>\n\n          <slot name=\"action\"></slot>\n        </div>\n\n        ${Object.entries(this.getAdditionalFields(profile))\n          .filter(([, value]) => value !== \"\")\n          .map(([key, value]) => this.renderAdditionalField(key, value))}\n      </div>\n    `;\n  }\n\n  render() {\n    switch (this._agentProfile.value.status) {\n      case \"pending\":\n        return html`\n          <div class=\"column\">\n            <div class=\"row\" style=\"align-items: center\">\n              <sl-skeleton\n                effect=\"pulse\"\n                style=\"height: 32px; width: 32px; border-radius: 50%;\"\n              ></sl-skeleton>\n              <div>\n                <sl-skeleton\n                  effect=\"pulse\"\n                  style=\"width: 122px; margin-left: 8px;\"\n                ></sl-skeleton>\n              </div>\n            </div>\n\n            ${this.store.config.additionalFields.map(\n              () => html`\n                <sl-skeleton\n                  effect=\"pulse\"\n                  style=\"width: 200px; margin-top: 16px;\"\n                ></sl-skeleton>\n              `\n            )}\n          </div>\n        `;\n      case \"complete\":\n        return this.renderProfile(this._agentProfile.value.value);\n      case \"error\":\n        return html`<display-error\n          .headline=${msg(\"Error fetching the profile\")}\n          .error=${this._agentProfile.value.error.data.data}\n        ></display-error>`;\n    }\n  }\n\n  static styles = [sharedStyles];\n}\n","import { html } from \"lit-html\";\nimport \"@holochain-open-dev/profiles/elements/profile-detail.js\";\nimport \"@holochain-open-dev/profiles/elements/profiles-context.js\";\nimport { ProfilesZomeMock } from \"@holochain-open-dev/profiles/mocks\";\nimport { ProfilesStore, ProfilesClient } from \"@holochain-open-dev/profiles\";\n\nconst mock = new ProfilesZomeMock();\n\n// More on how to set up stories at: https://storybook.js.org/docs/7.0/web-components/writing-stories/introduction\nexport default {\n  title: \"Frontend/Elements/profile-detail\",\n  tags: [\"autodocs\"],\n  component: \"profile-detail\",\n  render: (args) =>\n    html` <profiles-context\n      .store=${new ProfilesStore(new ProfilesClient(mock))}\n    >\n      <profile-detail\n        .agentPubKey=${Array.from(mock.agentsProfiles.keys())[0]}\n      />\n    </profiles-context>`,\n};\n\n// More on writing stories with args: https://storybook.js.org/docs/7.0/web-components/writing-stories/args\nexport const Demo = {};\n"],"names":[],"sourceRoot":""}